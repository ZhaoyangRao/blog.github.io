(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{152:function(a,e,r){"use strict";r.r(e);var t=r(0),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[a._v("#")]),a._v(" 缓存")]),a._v(" "),r("p",[a._v("缓存的诞生主要是为了减少请求交互，对于浏览器来说就是更快的打开页面，更少的请求，但其实缓存问题并不只是在浏览器端，服务端也同样会有缓存问题，尤其服务端不支持热更新的时候，这里主要讲浏览器的缓存机制。")]),a._v(" "),r("h3",{attrs:{id:"浏览器的缓存位置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存位置"}},[a._v("#")]),a._v(" 浏览器的缓存位置")]),a._v(" "),r("p",[a._v("浏览器通常是把缓存下来的文件，放到哪的呢？"),r("br")]),a._v(" "),r("p",[r("img",{attrs:{src:"/images/cache.png",alt:"avatar"}}),a._v("\n其实打开浏览器就能看见size一行很多都是from memory cache与from disk cache，并且你可以看见from disk cache消耗的时间与from memory cache消耗的时间，from memory cache基本都是0ms，证明from memory cache其实读取速度更快。")]),a._v(" "),r("h4",{attrs:{id:"内存缓存-from-memory-cache"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存缓存-from-memory-cache"}},[a._v("#")]),a._v(" 内存缓存(from memory cache)")]),a._v(" "),r("p",[a._v("内存缓存具有更明显的优势，快速读取，但是缓存的时效性会随着进程的释放而释放了，比如你关闭了页面基本这个缓存就没了，重新打开该页面，又会发起新的请求。")]),a._v(" "),r("h4",{attrs:{id:"硬盘缓存-from-disk-cache"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#硬盘缓存-from-disk-cache"}},[a._v("#")]),a._v(" 硬盘缓存(from disk cache)")]),a._v(" "),r("p",[a._v("硬盘缓存需要去系统硬盘里面读取资源，当然读取的速度会相对内存缓存慢一些，但是它的容量和时长是最好的，所以其实大部分资源会被缓存在硬盘里面，你用app或者浏览器一段时间发现越来越大，大部分都是因为硬盘缓存越来越多")]),a._v(" "),r("p",[a._v("浏览器自己的机制决定存在哪里，正常情况下大文件和使用频率很高的文件浏览器都会自动存储在硬盘中")]),a._v(" "),r("h4",{attrs:{id:"service-worker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[a._v("#")]),a._v(" Service Worker")]),a._v(" "),r("p",[a._v("如何缓存大部分都是浏览器自己的机制去决定的，但Service Worker给我们提供了开发者自己去决定控制缓存哪些文件，如何读取匹配缓存，是否去读缓存，这也是pwa的核心，这里不再细谈。")]),a._v(" "),r("h3",{attrs:{id:"浏览器缓存过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存过程"}},[a._v("#")]),a._v(" 浏览器缓存过程")]),a._v(" "),r("ul",[r("li",[a._v("浏览器发起请求，先查找自己有没有缓存以及缓存的标识，没有就请求")]),a._v(" "),r("li",[a._v("浏览器拿到返回的结果把缓存和缓存的标识存入缓存中")]),a._v(" "),r("li",[a._v("所以其实浏览器如何去缓存，大部分是根据服务端的标识，告诉它用什么样的缓存策略去缓存这个文件")])]),a._v(" "),r("h3",{attrs:{id:"浏览器的缓存策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存策略"}},[a._v("#")]),a._v(" 浏览器的缓存策略")]),a._v(" "),r("h4",{attrs:{id:"强缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),r("p",[a._v("不会向服务器发送请求，直接从缓存中读取资源，强缓存可以设置HTTP Header实现，主要是Expires 和 Cache-Control"),r("br")]),a._v(" "),r("p",[r("strong",[a._v("Expires")])]),a._v(" "),r("p",[a._v("Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。所以现在基本都是Cache-Control的方式了。")]),a._v(" "),r("p",[r("strong",[a._v("Cache-Control")])]),a._v(" "),r("p",[a._v("其实有很多属性，但是实际工作我遇到的大部分是以下几个属性"),r("br")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("max-age\nmax-age一般都是和'public, max-age=xxx'使用，表示就是在xxx时间内再次访问都走缓存，不再向服务器发起请求了")])]),a._v(" "),r("li",[r("p",[a._v("no-store\n表示不使用缓存，所有的内容都不缓存，全部都要重新发起请求")])]),a._v(" "),r("li",[r("p",[a._v("no-cache\n看字面意思，有可能你以为跟no-store有点像，以为是不缓存，其实这个表示的意思是不使用cache-control的那些属性来验证，no-cache其实是no-cache-control，不使用这个使用什么呢，也就是协商缓存了，所以看见这个属性大致也就是指协商缓存")])])]),a._v(" "),r("h4",{attrs:{id:"协商缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),r("p",[a._v("当被设置no-cache的时候，浏览器知道现在不能走强缓存策略了，于是开始读取协商缓存的那些标识属性，浏览器携带这些标识向服务器发起请求，由服务器告诉浏览器要不要使用缓存。")]),a._v(" "),r("ul",[r("li",[a._v("Last-Modified")])]),a._v(" "),r("p",[a._v("看字面意思就知道是最后一次修改的时间，浏览器第一次请求的时候就会在响应头里面拿到这个标识，再次请求放到Request Header里的If-Modified-Since里，服务端拿到这个标识对比自己的，如果相同就表示无修改,就走缓存了。")]),a._v(" "),r("ul",[r("li",[a._v("ETag")])]),a._v(" "),r("p",[a._v("Last-Modified一般是修改的时间，而ETag也跟字面意思一样，就是每次修改了就会有一个tag标识，资源变化了就会重新生成一个ETag，同理第一次请求，浏览器在响应头里面拿到这个标识，再次请求的时候放到Request Header里的If-None-Match里，服务端对比自己的etag，如果相同就表示无修改，走缓存。")]),a._v(" "),r("p",[a._v("其实ETag比Last-Modified更合理，Last-Modified是通过修改时间，而且是精确到秒的如果你在浏览器端把文件打开了，修改时间就变了，或者在1s内把时间改了，等等都有可能会造成错误对比")]),a._v(" "),r("h3",{attrs:{id:"浏览器缓存方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存方案"}},[a._v("#")]),a._v(" 浏览器缓存方案")]),a._v(" "),r("ul",[r("li",[a._v("前端界面设置meta")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />\n')])])]),r("p",[a._v("遗憾的是设置这个并不一定会起作用，浏览器会优先读取服务端返回的header的标识，并且不是所有的浏览器都会支持。"),r("br"),a._v("\n现在前端尤其大部分单页面，其实只要html不缓存，前端还是可以通过对js,css,img打包的hash来间接控制缓存。"),r("br")]),a._v(" "),r("ul",[r("li",[a._v("服务端设置")])]),a._v(" "),r("p",[a._v("长期不变化的可以设置强缓存，频繁变化的设置协商缓存")])])}),[],!1,null,null,null);e.default=s.exports}}]);