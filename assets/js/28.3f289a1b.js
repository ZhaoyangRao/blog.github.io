(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{168:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"gulp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp"}},[t._v("#")]),t._v(" gulp")]),t._v(" "),n("p",[t._v("gulp是一款前端的构建工具，并且十分简单，核心api很少，我觉得是目前最有资格说自己开箱即用的构建工具了")]),t._v(" "),n("p",[t._v("在没有构建工具的原始时代，前端的很多痛点，比如编译，大多依赖于编辑器自己装插件去实现css的转换啊,es6的转换啊，热更新啊，这还只是开发阶段，后面的压缩代码，压缩图片等等，严重影响了前端的编程体验，所以就需要自动化的构建工具来完成这些事，前端工作者只操心编码就行了")]),t._v(" "),n("p",[t._v("gulp就是一款很优秀的构建工具,像组合积木一样，把一个一个task给组装起来，完成整个构建流程")]),t._v(" "),n("h2",{attrs:{id:"核心api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心api"}},[t._v("#")]),t._v(" 核心api")]),t._v(" "),n("h3",{attrs:{id:"gulp-src"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp-src"}},[t._v("#")]),t._v(" gulp.src()")]),t._v(" "),n("p",[t._v("简单的理解就是读取文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" gulp.src('js/*.js')\n\n//gulp.src(path) - 选择文件，传入参数是文件路径，从上面也可以看见可以传匹配符号*，\n")])])]),n("h3",{attrs:{id:"gulp-dest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp-dest"}},[t._v("#")]),t._v(" gulp.dest()")]),t._v(" "),n("p",[t._v("简单的理解就是输出文件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("gulp.dest('dist/js')\n\n//gulp.dest(path) - 输出文件\n")])])]),n("h3",{attrs:{id:"gulp-task"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp-task"}},[t._v("#")]),t._v(" gulp.task()")]),t._v(" "),n("p",[t._v("定义一个任务，gulp里面任务的概念贯穿整个构建流程，构建流程就是一个一个任务组成的")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 获取 gulp\nvar gulp = require('gulp')\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n\n//这就是一个压缩js的任务示例\n")])])]),n("h3",{attrs:{id:"gulp-watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gulp-watch"}},[t._v("#")]),t._v(" gulp.watch()")]),t._v(" "),n("p",[t._v("监听文件的变化,没有命令可以运行 gulp.watch()，需要将 gulp.watch() 包含在一个任务中。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/ 获取 gulp\nvar gulp = require('gulp')\n// 获取 uglify 模块（用于压缩 JS）\nvar uglify = require('gulp-uglify')\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n})\n// 在命令行使用 gulp auto 启动此任务\ngulp.task('watch', function () {\n    // 监听文件修改，当文件被修改则执行 script 任务\n    gulp.watch('js/*.js', ['script'])\n})\n\n// 使用 gulp.task('default') 定义默认任务\n// 在命令行使用 gulp 启动 script 任务和 auto 任务\ngulp.task('default', ['watch'])\n")])])]),n("h3",{attrs:{id:"简单的配置一个前端构建工程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单的配置一个前端构建工程"}},[t._v("#")]),t._v(" 简单的配置一个前端构建工程")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('const gulp = require(\'gulp\')\n\nhtml给弄到dist\ngulp.task(\'copy-html\',function(){\n    gulp.src(\'./index.html\')\n        .pipe(gulp.dest(\'dist\'))\n}\n\n合并css文件 压缩css 插件gulp-concat\nconst  concat  = require（"gulp-concat"）\ngulp.task("copy-css",function(){\n        gulp.src("./css/**/*")       \n            .pipe(concat("main.css"))     //合并后的文件名\n                .pipe(minifyCss())        //压缩  \n                    .pipe(gulp.dest("dist/css"))   //复制到当前目录的dist目录内     \n————————————————————————————————————————————————————————————————\n编译js代码  压缩js  \nconst uglify = require（"gulp-uglify"）\nconst babel = require("gulp-babel");    // 用于ES6转化ES5\ngulp.tast("copy-js",()=>{\n     gulp.src("./js/**/*")    \n        .pipe(babel({\n            presets: ["es2015"]               \n        }))  //将ES6代码转译为可执行的JS代码\n        .pipe(uglify()) //压缩\n        .pipe(gulp.dest("dist/js"))  //复制到当前目录的dist目录内     \n}) \n————————————————————————————————————————————————————————————————\n压缩图片   \nconst imagemin = require("gulp-imagemin")\ngulp.task("copy-images",()=>{\ngulp.src("./assets/**/*")\n.pipe(imagemin()) //压缩图片\n.pipe(gulp.dest("dist/assets"))\n})\n————————————————————————————————————————————————————————————————\nwatch 文件的变化\ngulp.task("watch",()=>{\ngulp.watch("index.html",["copy-index"])\ngulp.watch("./css/**/*",["copy-css"])\ngulp.watch("./js/**/*",["copy-js"])\ngulp.watch("./assets/**/*",["copy-images"])\ngulp.watch("./dist/**/*.*", ["reload"]);//监听dist下所有文件\n\n})\n\ngulp.task("reload", function(){\n    gulp.src("./dist/**/*.html")\n        .pipe(connect.reload());   //热更新\n})\n————————————————————————————————————————————————————————————————\ngulp服务器的简单配置，比如跨域之类的都可以\nvar proxy = require(\'http-proxy-middleware\');\n\ngulp.task("server",()=>{\nconnect.server({\n    //说明服务器的根目录\n    port: 8000,\n    root:"dist",\n    livereload:true //实时更新\n    middleware: function (connect, opt) {\n            return [\n                proxy(\'/fs\', {\n                    target: \'http://172.16.2.52:8080\',\n                    changeOrigin:true\n                }),\n                proxy(\'/product\', {\n                    target: \'http://172.16.1.60:8080\',\n                    changeOrigin:true\n                }),\n                proxy(\'/bpauth\', {\n                    target: \'http://192.168.24.77:8080\',\n                    changeOrigin:true\n                })\n            ]\n        }\n    })\n    })\n————————————————————————————————————————————————————————————————\n\n添加一些组合的命令 比如gulp build来一次性执行多个任务，打包项目\ngulp.task("build",["copy-html","copy-index","copy-css","cope-js","copy-images"],()=>{\nconsole.log(success)\n})\n————————————————————————————————————————————————————————————————\n设置一些gulp默认启动的项目，server watch\ngulp.task("default",["server","watch"])\n\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);